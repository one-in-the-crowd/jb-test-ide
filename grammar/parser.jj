options {
	STATIC = false ;
}
PARSER_BEGIN(Parser)
package com.github.oitc.parser;

import com.github.oitc.parser.data.ExpressionValue;
import com.github.oitc.parser.data.ExpressionValue.*;

import java.io.PrintStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

class Parser {
    public static void main( String[] args ) throws ParseException, TokenMgrError {
        Parser parser = new Parser( System.in ) ;
        parser.Start(System.out) ;
    }
}

PARSER_END(Parser)



SKIP : { " " }
TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS: "-" > }
TOKEN : { < MULT: "*" > }
TOKEN : { < DIV: "/" > }
TOKEN : { < POW: "^" > }
TOKEN : { < NUMBER_INT : (<DIGIT>)+ > }
TOKEN : { < NUMBER_ANY : (<DIGIT>)+ "." (<DIGIT>)+ >}
TOKEN : { < #DIGIT : (["0"-"9"]) > }
TOKEN : { < #LETER : (["a"-"z","A"-"Z"]) > }

TOKEN : { < VAR: "var" > }
TOKEN : { < EQ: "=" > }

TOKEN : { < PRINT: "print" > }
TOKEN: {
    <QUOTED:
        "\""
        (
             "\\" ~[]     //any escaped character
        |
            ~["\"","\\"]  //any character except quote or backslash
        )*
        "\"" >
}
TOKEN : { < OUT: "out" > }
TOKEN : { < NAME: <LETER> (<LETER> | <DIGIT>)* > }

TOKEN : { < EOL : ("\n" | "\r" | "\r\n")+ > }



void Start(PrintStream printStream) :
{
    ExpressionValue value;
    Map<String, ExpressionValue> vars = new HashMap<>();
}
{
	(
            value = Expression(vars)
            <EOL>
        |
            <OUT>
            value = Expression(vars)
            <EOL>
            { printStream.println(value.getValue());}
	    |
	        <PRINT>
	        {String quoted;}
	        quoted = Quoted()
	        <EOL>
            { printStream.println(quoted);}
        |
            <VAR>
            token = <NAME>
            {
                String varName = token.image;
                vars.put(varName, null);
            }
            <EQ>
            value = Expression(vars)
            {vars.put(varName, value);}
            <EOL>
	)*
	<EOF>
}

List<Integer> Sequence() throws IllegalArgumentException :
{
    ExValInt leftBound;
    ExValInt rightBound;
}
{
    (
        "{"
        leftBound = NumberInt()
        ","
        rightBound = NumberInt()
        "}"
        {
            if (rightBound.getValue()<leftBound.getValue()) {
                throw new IllegalArgumentException("Sequence right arg less than left.");
            }
            int size = rightBound.getValue() - leftBound.getValue();
            List<Integer> list = new ArrayList(size);
            for(int i=0; i <= size; i++) {
                list.add(leftBound.getValue() + i);
            }
            return list;
        }
    )+
}

ExpressionValue Expression(Map<String, ExpressionValue> vars) :
{
    ExpressionValue tempValue;
    ExpressionValue value;
}
{
    value = ExpressionValue(vars)
    (
            <PLUS>
            tempValue = ExpressionValue(vars)
            {value = value.plus(tempValue);}
        |
            <MINUS>
            tempValue = ExpressionValue(vars)
            {value = value.minus(tempValue);}
        |
            <MULT>
            tempValue = ExpressionValue(vars)
            {value = value.times(tempValue);}
        |
            <DIV>
            tempValue = ExpressionValue(vars)
            {value = value.div(tempValue);}
        |
            value = Power(vars, value)
    )*
    {return value;}
}

ExpressionValue Power(
    Map<String, ExpressionValue> vars,
    ExpressionValue value
) :
{
    Token token;
    ExpressionValue tempValue;
}
{
    <POW>
    tempValue = ExpressionValue(vars)
    {
        Double result = Math.pow(
            ExtKt.getDoubleValue(value),
            ExtKt.getDoubleValue(tempValue)
        );
        return new ExValDouble(result);
    }
}

ExpressionValue ExpressionValue(Map<String, ExpressionValue> vars) throws NumberFormatException :
{
    Token token;
    ExpressionValue value;
} {
    (
            value = Number()
        |
            value = NumberInt()
        |
            token = <NAME>
            {value = vars.get(token.image);}
        |
            {List<Integer> sequenceList;}
            sequenceList = Sequence()
            {value = new ExValSequence(sequenceList);}

    )
    {return value;}
}

ExValDouble Number() throws NumberFormatException :
{
    Token token;
} {
    token = <NUMBER_ANY>
    {return new ExValDouble(Double.parseDouble(token.image));}
}

ExValInt NumberInt() throws NumberFormatException :
{
    Token token;
} {
    token = <NUMBER_INT>
    {return new ExValInt(Integer.parseInt(token.image));}
}

String Quoted() :
{
    Token token;
} {
    token = <QUOTED>
    {
        String tokenStr = token.image;
        return tokenStr.substring(1, tokenStr.length()-1);
    }
}
