options {
	STATIC = false ;
}
PARSER_BEGIN(Parser)
package com.github.oitc.parser;

import java.io.PrintStream;
import java.util.Map;
import java.util.HashMap;

class Parser {
    public static void main( String[] args ) throws ParseException, TokenMgrError {
        Parser parser = new Parser( System.in ) ;
        parser.Start(System.out) ;
    }
}
PARSER_END(Parser)



SKIP : { " " }
TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS: "-" > }
TOKEN : { < MULT: "*" > }
TOKEN : { < DIV: "/" > }
TOKEN : { < POW: "^" > }
TOKEN : { < NUMBER : (<DIGIT>)+ | (<DIGIT>)+ "." (<DIGIT>)+ >}
TOKEN : { < #DIGIT : (["0"-"9"]) > }
TOKEN : { < #LETER : (["a"-"z","A"-"Z"]) > }

TOKEN : { < VAR: "var" > }
TOKEN : { < EQ: "=" > }

TOKEN : { < PRINT: "print" > }
TOKEN: {
    <QUOTED:
        "\""
        (
             "\\" ~[]     //any escaped character
        |
            ~["\"","\\"]  //any character except quote or backslash
        )*
        "\"" >
}
TOKEN : { < OUT: "out" > }
TOKEN : { < NAME: <LETER> (<LETER> | <DIGIT>)* > }

TOKEN : { < EOL : ("\n" | "\r" | "\r\n")+ > }



void Start(PrintStream printStream) :
{
    double value;
    Map<String, Double> vars = new HashMap<>();
}
{
	(
            value = Expression(vars)
            <EOL>
        |
            <OUT>
            value = Expression(vars)
            <EOL>
            { printStream.println(value);}
	    |
	        <PRINT>
	        {String quoted;}
	        quoted = Quoted()
	        <EOL>
            { printStream.println(quoted);}
        |
            <VAR>
            token = <NAME>
            {
                String varName = token.image;
                vars.put(varName, null);
            }
            <EQ>
            value = Expression(vars)
            {vars.put(varName, value);}
            <EOL>
	)*
	<EOF>
}

double Expression(Map<String, Double> vars) :
{
    Token token;
    double tempNumber;
    double number;
}
{
    number = Value(vars)
    (
            <PLUS>
            tempNumber = Value(vars)
            {number += tempNumber;}
        |
            <MINUS>
            tempNumber = Value(vars)
            {number -= tempNumber;}
        |
            <MULT>
            tempNumber = Value(vars)
            {number *= tempNumber;}
        |
            <DIV>
            tempNumber = Value(vars)
            {number /= tempNumber;}
        |
            <POW>
            tempNumber = Value(vars)
            {number = Math.pow(number, tempNumber);}
    )*
    {return number;}
}

double Value(Map<String, Double> vars) throws NumberFormatException :
{
    Token token;
    double number;
} {
    (
            number = Number()
        |
            token = <NAME>
            {number = vars.get(token.image);}

    )
    {return number;}
}

double Number() throws NumberFormatException :
{
    Token token;
} {
    token = <NUMBER>
    {return Double.parseDouble(token.image);}
}

String Quoted() :
{
    Token token;
} {
    token = <QUOTED>
    {
        String tokenStr = token.image;
        return tokenStr.substring(1, tokenStr.length()-1);
    }
}
