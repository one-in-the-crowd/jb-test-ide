options {
	STATIC = false ;
}
PARSER_BEGIN(Parser)
package com.github.oitc.parser;
import java.io.PrintStream;

class Parser {
    public static void main( String[] args ) throws ParseException, TokenMgrError {
        Parser parser = new Parser( System.in ) ;
        parser.Start(System.out) ;
    }
}
PARSER_END(Parser)



SKIP : { " " }
TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS: "-" > }
TOKEN : { < MULT: "*" > }
TOKEN : { < DIV: "/" > }
TOKEN : { < POW: "^" > }
TOKEN : { < NUMBER : <DIGITS> | <DIGITS> "." <DIGITS> >}
TOKEN : { < #DIGITS : (["0"-"9"])+ > }

TOKEN : { < PRINT: "print" > }
TOKEN: {
    <QUOTED:
        "\""
        (
             "\\" ~[]     //any escaped character
        |
            ~["\"","\\"]  //any character except quote or backslash
        )*
        "\"" >
}

TOKEN : { < EOL : ("\n" | "\r" | "\r\n")+ > }



void Start(PrintStream printStream) :
{
    double value;
    String tmpString;
}
{
	(
            value = Expression()
            <EOL>
            { printStream.println(value);}
	    |
	        <PRINT>
	        tmpString = Quoted()
	        <EOL>
            { printStream.println(tmpString);}
	)*
	<EOF>
}

double Expression() :
{
    double tempNumber;
    double number;
}
{
    number = Number()
    (
            <PLUS>
            tempNumber = Number()
            {number += tempNumber;}
        |
            <MINUS>
            tempNumber = Number()
            {number -= tempNumber;}
        |
            <MULT>
            tempNumber = Number()
            {number *= tempNumber;}
        |
            <DIV>
            tempNumber = Number()
            {number /= tempNumber;}
        |
            <POW>
            tempNumber = Number()
            {number = Math.pow(number, tempNumber);}
    )*
    {return number;}
}

double Number() throws NumberFormatException :
{
    Token token;
} {
    token = <NUMBER>
    {return Double.parseDouble(token.image);}
}

String Quoted() :
{
    Token token;
} {
    token = <QUOTED>
    {
        String tokenStr = token.image;
        return tokenStr.substring(1, tokenStr.length()-1);
    }
}
