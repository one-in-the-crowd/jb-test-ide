options {
	STATIC = false ;
}
PARSER_BEGIN(Parser)
package com.github.oitc.parser;

import com.github.oitc.parser.data.ExpressionValue;
import com.github.oitc.parser.data.ExpressionValue.*;
import com.github.oitc.parser.data.ParserPosition;

import java.beans.Expression;
import java.io.PrintStream;
import java.io.StringReader;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.IOException;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.util.*;
import java.util.function.Function;
import static com.github.oitc.parser.ExtKt.getIntValue;

class Parser {
    public static void main( String[] args ) throws ParseException, TokenMgrError, IOException {
        Reader reader = ReaderMaker.INSTANCE.invoke(System.in);
        Parser parser = new Parser( reader ) ;
        parser.Start(System.out) ;
    }
}

PARSER_END(Parser)



SKIP : { " " }
TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS: "-" > }
TOKEN : { < MULT: "*" > }
TOKEN : { < DIV: "/" > }
TOKEN : { < POW: "^" > }
TOKEN : { < NUMBER_INT : (<DIGIT>)+ > }
TOKEN : { < NUMBER_ANY : (<DIGIT>)+ "." (<DIGIT>)+ >}
TOKEN : { < #DIGIT : (["0"-"9"]) > }
TOKEN : { < #LETER : (["a"-"z","A"-"Z"]) > }

TOKEN : { < VAR: "var" > }
TOKEN : { < EQ: "=" > }

TOKEN : { < MAP: "map"> }

TOKEN : { < PRINT: "print" > }
TOKEN: {
    <QUOTED:
        "\""
        (
             "\\" ~[]     //any escaped character
        |
            ~["\"","\\"]  //any character except quote or backslash
        )*
        "\"" >
}
TOKEN : { < OUT: "out" > }
TOKEN : { < NAME: <LETER> (<LETER> | <DIGIT>)* > }

TOKEN : { < EOL : ("\n" | "\r" | "\r\n")+ > }


void Start(PrintStream printStream) :
{
    ExpressionValue value;
    Map<String, ExpressionValue> vars = new HashMap<>();
}
{
	(
            value = Expression(vars)
            <EOL>
        |
            <OUT>
            value = Expression(vars)
            <EOL>
            { printStream.println(value.getValue());}
	    |
	        <PRINT>
	        {String quoted;}
	        quoted = Quoted()
	        <EOL>
            { printStream.println(quoted);}
        |
            <VAR>
            token = <NAME>
            {
                String varName = token.image;
                vars.put(varName, null);
            }
            <EQ>
            value = Expression(vars)
            {vars.put(varName, value);}
            <EOL>
	)*
	<EOF>
}

ExValSequence Map(Map<String, ExpressionValue> vars):
{
    Token token;
    List<Integer> sequenceList;
    String mapArgName;
    ExValSequence mapValue;
}
{
    <MAP>
    "("
        sequenceList = Sequence()
        ","
        token= <NAME>
        {mapArgName = token.image;}

        token = "->"

        mapValue = mapInternal(sequenceList, mapArgName)
    ")"
    {return mapValue;}
}

JAVACODE
ExValSequence mapInternal(List<Integer> sequence, String mapArgName) {
    List<Integer> resultSequence = new LinkedList<Integer>();

    ParserPosition mapExpressionPosition = saveParserPosition();
    ParserPosition endMapExpressionPosition = null;

    Map<String, ExpressionValue> mapIterationArgs = new HashMap();
    Iterator<Integer> iterator = sequence.iterator();
    while(iterator.hasNext()) {
        if (!iterator.hasNext()) break;

        rewindParser(mapExpressionPosition);

        ParserPosition posAfterRewind = saveParserPosition();

        Integer sequenceArgument = iterator.next();
        mapIterationArgs.put(mapArgName, new ExValInt(sequenceArgument));


        ExpressionValue exValue = Expression(mapIterationArgs);
        resultSequence.add(getIntValue(exValue));
    }

    return new ExValSequence(resultSequence);
}

JAVACODE
ParserPosition saveParserPosition() {
    return new ParserPosition(
        jj_input_stream.bufpos,
        jj_input_stream.line,
        jj_input_stream.column
        );
}

JAVACODE
void setParserStream(SimpleCharStream stream) {
    try {
          Reader streamReader = stream.inputStream;
          streamReader.reset();
          streamReader.skip(stream.bufpos + 1);

          ParserTokenManager tokenManager = new ParserTokenManager(stream);
            ReInit(tokenManager);
            jj_input_stream.ReInit(
                    streamReader,
                    stream.line,
                    stream.column + 1 // because SimpleCharStream has -1 at REinit
                );

        } catch (IOException ex) {
          System.out.println("Parser rewind failed. Ex: "+ex);
        }
}

JAVACODE
void rewindParser(ParserPosition position) {
try {
      Reader streamReader = jj_input_stream.inputStream;
      streamReader.reset();
      streamReader.skip(position.getBufPos() + 1);

        ReInit(streamReader);
        jj_input_stream.ReInit(
                streamReader,
                position.getLine(),
                position.getColumn() + 1 // because SimpleCharStream has -1 at REinit
            );

//        jj_input_stream.bufpos=position.getBufPos(); // BREAKS ALL
    } catch (IOException ex) {
      System.out.println("Parser rewind failed. Ex: "+ex);
    }
}

List<Integer> Sequence() throws IllegalArgumentException :
{
    ExValInt leftBound;
    ExValInt rightBound;
    List<Integer> seqBounds = new ArrayList<>();
}
{
    "{"
    leftBound = NumberInt()
    ","
    rightBound = NumberInt()
    "}"
    {
        if (rightBound.getValue()<leftBound.getValue()) {
            throw new IllegalArgumentException("Sequence right arg less than left.");
        }
        int size = rightBound.getValue() - leftBound.getValue();
        for(int i=0; i <= size; i++) {
            seqBounds.add(leftBound.getValue() + i);
        }
        return seqBounds;
    }
}

ExpressionValue Expression(Map<String, ExpressionValue> vars) :
{
    ExpressionValue tempValue;
    ExpressionValue value;
}
{
    value = ExpressionValue(vars)
    (
            <PLUS>
            tempValue = ExpressionValue(vars)
            {value = value.plus(tempValue);}
        |
            <MINUS>
            tempValue = ExpressionValue(vars)
            {value = value.minus(tempValue);}
        |
            <MULT>
            tempValue = ExpressionValue(vars)
            {value = value.times(tempValue);}
        |
            <DIV>
            tempValue = ExpressionValue(vars)
            {value = value.div(tempValue);}
        |
            value = Power(vars, value)
    )*
    {return value;}
}

ExpressionValue Power(
    Map<String, ExpressionValue> vars,
    ExpressionValue value
) :
{
    Token token;
    ExpressionValue tempValue;
}
{
    <POW>
    tempValue = ExpressionValue(vars)
    {
        Double result = Math.pow(
            ExtKt.getDoubleValue(value),
            ExtKt.getDoubleValue(tempValue)
        );
        return new ExValDouble(result);
    }
}

ExpressionValue ExpressionValue(Map<String, ExpressionValue> vars) throws NumberFormatException :
{
    Token token;
    ExpressionValue value;
} {
    (
            value = Number()
        |
            value = NumberInt()
        |
            token = <NAME>
            {value = vars.get(token.image);}
        |
            {List<Integer> sequenceList;}
            sequenceList = Sequence()
            {value = new ExValSequence(sequenceList);}
        |
            value = Map(vars)

    )
    {return value;}
}

ExValDouble Number() throws NumberFormatException :
{
    Token token;
} {
    token = <NUMBER_ANY>
    {return new ExValDouble(Double.parseDouble(token.image));}
}

ExValInt NumberInt() throws NumberFormatException :
{
    Token token;
} {
    token = <NUMBER_INT>
    {return new ExValInt(Integer.parseInt(token.image));}
}

String Quoted() :
{
    Token token;
} {
    token = <QUOTED>
    {
        String tokenStr = token.image;
        return tokenStr.substring(1, tokenStr.length()-1);
    }
}
